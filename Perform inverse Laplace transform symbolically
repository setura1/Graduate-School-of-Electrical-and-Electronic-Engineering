import sympy as sp

# 1. 定義する変数 / Define the symbols for s and t
s, t = sp.symbols('s t', real=True)
z = sp.symbols('z', complex=True)  # 複素数 z のシンボル / Complex variable z

# 2. 複素関数 F(s) を定義 / Define the complex function F(s)
# 例: F(s) = 1 / (s^2 + s + 1) の複素関数 / Example: F(s) = 1 / (s^2 + s + 1)
F_s = 1 / (s**2 + s + 1)

# 3. 逆ラプラス変換を複素関数で求める / Perform inverse Laplace transform symbolically
f_t = sp.inverse_laplace_transform(F_s, s, t)

# 4. 結果を表示 / Display the result
print("逆ラプラス変換の結果 (複素関数ベース) / Inverse Laplace Transform Result (Complex Function Based):")
sp.pprint(f_t)

# 5. 複素平面上のプロット（ポールの位置を視覚化） / Plot the poles in the complex plane (visualizing poles)
poles = sp.solve(1/(s**2 + s + 1), s)  # F(s) のポールを計算 / Calculate the poles of F(s)
print("\nF(s) のポール / Poles of F(s):", poles)

# 6. ポールの位置をプロット / Plotting the pole locations
import matplotlib.pyplot as plt
import numpy as np

# ポールの実数部と虚数部を計算 / Compute the real and imaginary parts of the poles
real_parts = [sp.re(pole.evalf()) for pole in poles]
imaginary_parts = [sp.im(pole.evalf()) for pole in poles]

plt.scatter(real_parts, imaginary_parts, color='red')
plt.axhline(0, color='black',linewidth=1)
plt.axvline(0, color='black',linewidth=1)
plt.grid(True)

plt.title(' / Pole Locations in the Complex Plane for F(s)')
plt.xlabel('Re(s)')
plt.ylabel('Im(s)')
plt.show()
